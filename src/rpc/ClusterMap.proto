syntax = "proto3";
package gestalt.rpc;

import "google/protobuf/empty.proto";


service ClusterMap {
    /**
     * Adds a server to cluster map
     *
     * Server IDs are allocated in ascending order, where 0 is invalid.
     *
     * @param id [optional] if given, i.e. non-zero, force using this as ID
     * @param addr server address
     * @return id - server ID
     */
    rpc AddServer(ServerProp) returns (ServerProp) {}

    //rpc RemoveServer(ServerProp) returns (google.protobuf.Empty) {}

    /**
     * Get list of registered servers
     */
    rpc GetServers(google.protobuf.Empty) returns (ServerList) {}

    /**
     * Update heartbeat of source server
     *
     * @note we won't bother implementing HA for now
     */
    //rpc Heartbeat(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

/** @note we don't support HA for now, the cluster configuration is static */
//service ClusterMapListener { }

/** server properties */
message ServerProp {
    /** server unique ID */
    uint32 id = 1;
    /** server's IP address */
    string addr = 2;
}

message ServerList {
    /** list of servers registered */
    repeated ServerProp servers = 1;
}
